# Monorepo Coverage Setup
# This example shows how to configure coverage for monorepos with custom package grouping.

name: Monorepo Coverage
on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write
  contents: read

jobs:
  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests for all packages
        run: |
          # Run tests for each package/app that generates coverage
          npm run test:packages -- --coverage
          npm run test:apps -- --coverage

      - name: Coverage Report with Custom Grouping
        uses: farhan-ahmed1/hancover-action@v1
        with:
          files: |
            packages/*/coverage/lcov.info
            apps/*/coverage/lcov.info
            libs/*/coverage/cobertura.xml
          gist-id: ${{ secrets.COVERAGE_GIST_ID }}
          github-token: ${{ secrets.GIST_TOKEN }}
          min-threshold: 75
          # Custom package grouping (see .coverage-report.json below)

# =============================================================================
# Configuration File: .coverage-report.json (place in repository root)
# =============================================================================
# {
#   "groups": [
#     {
#       "name": "UI Components",
#       "patterns": [
#         "packages/ui/**",
#         "packages/components/**",
#         "packages/design-system/**"
#       ]
#     },
#     {
#       "name": "Utilities & Tools",
#       "patterns": [
#         "packages/utils/**",
#         "packages/cli/**",
#         "packages/build-tools/**"
#       ]
#     },
#     {
#       "name": "Web Applications",
#       "patterns": [
#         "apps/web/**",
#         "apps/admin/**",
#         "apps/dashboard/**"
#       ]
#     },
#     {
#       "name": "API Services",
#       "patterns": [
#         "apps/api/**",
#         "apps/worker/**",
#         "apps/auth/**"
#       ]
#     },
#     {
#       "name": "Shared Libraries",
#       "patterns": [
#         "libs/database/**",
#         "libs/validation/**",
#         "libs/types/**"
#       ]
#     }
#   ],
#   "ui": {
#     "expandFilesFor": ["UI Components", "API Services"]
#   },
#   "fallback": {
#     "group": "Other",
#     "patterns": ["**"]
#   }
# }

# =============================================================================
# Alternative: Inline Configuration (without .coverage-report.json)
# =============================================================================
# You can also specify grouping directly in the workflow:
#
# - name: Coverage Report with Inline Grouping
#   uses: farhan-ahmed1/hancover-action@v1
#   with:
#     files: |
#       packages/*/coverage/lcov.info
#       apps/*/coverage/lcov.info
#     groups: |
#       - name: "Frontend Packages"
#         patterns: ["packages/ui/**", "packages/components/**"]
#       - name: "Backend Services"  
#         patterns: ["apps/api/**", "apps/worker/**"]
#       - name: "Shared Utilities"
#         patterns: ["packages/utils/**", "libs/**"]

# =============================================================================
# Directory Structure Example:
# =============================================================================
# your-monorepo/
# ├── packages/
# │   ├── ui/                    # React components
# │   ├── components/            # Shared components
# │   ├── utils/                 # Utility functions
# │   └── cli/                   # Command-line tools
# ├── apps/
# │   ├── web/                   # Next.js web app
# │   ├── admin/                 # Admin dashboard
# │   ├── api/                   # Express API
# │   └── worker/                # Background workers
# ├── libs/
# │   ├── database/              # Database layer
# │   └── validation/            # Validation schemas
# └── .coverage-report.json      # Coverage configuration

# Benefits of this setup:
# - Organized coverage reports by logical package groups
# - Easy to identify which areas of your monorepo need attention
# - Supports mixed coverage formats (LCOV, Cobertura, JaCoCo, Clover)
# - Expandable file listings for important packages
# - Maintains overall project coverage metrics
