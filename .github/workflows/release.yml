name: Release

on:
  push:
    tags:
      - 'v*.*.*'

# Keep top-level minimal and elevate at job scope
permissions: {}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write       # create releases & upload assets
      id-token: write       # OIDC for keyless signing
      attestations: write   # upload provenance
      actions: read         # read workflow metadata for attestations
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high

      - name: Run tests
        run: npm test

      - name: Build the project
        run: npm run build

      - name: Verify build integrity
        run: |
          echo "Verifying build output..."
          test -f dist/index.js || (echo "dist/index.js missing" && exit 1)
          echo "Build verification passed"

      # Package everything users need to run the JS action
      - name: Create release bundle
        run: |
          rm -f hancover-action-dist.tgz checksums.txt
          tar -czf hancover-action-dist.tgz \
            action.yml \
            package.json \
            package-lock.json \
            README.md \
            LICENSE \
            dist
          sha256sum hancover-action-dist.tgz > checksums.txt

      # Install cosign (keyless signing)
      - name: Install cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      # Sign the bundle (produces signature and certificate)
      - name: Keyless sign bundle with cosign
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          # A single .bundle is convenient, but we also emit separate sig+cert
          cosign sign-blob --yes \
            --bundle hancover-action-dist.tgz.bundle \
            hancover-action-dist.tgz

          cosign sign-blob --yes \
            --output-signature hancover-action-dist.tgz.sig \
            --output-certificate hancover-action-dist.tgz.pem \
            hancover-action-dist.tgz

      # Compute SHA256 for the tarball
      - name: Compute tarball digest
        id: digest
        run: |
          echo "sha256=$(sha256sum hancover-action-dist.tgz | awk '{print $1}')" >> "$GITHUB_OUTPUT"

      # Publish provenance to GitHub's Attestations store (ties digest->workflow)
      - name: Generate provenance attestation (explicit digest)
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-name: hancover-action-dist.tgz
          subject-digest: sha256:${{ steps.digest.outputs.sha256 }}

      # Download that attestation as a local in-toto file so Scorecard can see it in the release assets
      - name: Export attestation as in-toto file
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh attestation download hancover-action-dist.tgz \
            --repo "$GITHUB_REPOSITORY" \
            --digest-alg sha256 > hancover-action-dist.intoto.jsonl
          test -s hancover-action-dist.intoto.jsonl

      # Create the GitHub Release and upload the artifact + signatures
      - name: Create signed release
        id: create_release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v1.0.4
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## ðŸ”’ Verification

            **Artifact digest (sha256):**
            ```
            ${{ steps.digest.outputs.sha256 }}
            ```

            **Files uploaded**
            - `hancover-action-dist.tgz` (release bundle)
            - `hancover-action-dist.tgz.sig` (cosign signature)
            - `hancover-action-dist.tgz.pem` (OIDC certificate)
            - `hancover-action-dist.tgz.bundle` (signature+cert bundle)
            - `checksums.txt` (sha256)
            - `hancover-action-dist.intoto.jsonl` (provenance attestation)

            **How to verify**
            ```bash
            # Signature
            cosign verify-blob \
              --signature hancover-action-dist.tgz.sig \
              --certificate hancover-action-dist.tgz.pem \
              hancover-action-dist.tgz

            # OR use the bundle:
            cosign verify-blob --bundle hancover-action-dist.tgz.bundle hancover-action-dist.tgz
            ```

            ## ðŸ“¦ Usage
            Pin to this exact version:
            ```yaml
            uses: farhan-ahmed1/hancover-action@${{ github.ref_name }}
            ```

            Required permissions:
            ```yaml
            permissions:
              pull-requests: write
              contents: read
            ```

          files: |
            hancover-action-dist.tgz
            hancover-action-dist.tgz.sig
            hancover-action-dist.tgz.pem
            hancover-action-dist.tgz.bundle
            checksums.txt
            hancover-action-dist.intoto.jsonl
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: print the artifact digest into a separate step output used above
      - name: Compute digest output
        id: print_digest
        run: |
          DIGEST=$(sha256sum hancover-action-dist.tgz | awk '{print $1}')
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"